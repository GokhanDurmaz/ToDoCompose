// Extension function comes with Kotlin feature and the functions can extend classes and interfaces.
// It does not need to inherit a class or use a decorator design pattern.
// It can be used for Third-party -- libraries being not modified -- to add new feature logics.
// It is defined as receiver type prefix and a method name follows the prefix like following;
// fun Int.abs(number: Int) { }
// 'this' keyword is used for accessing the receiver type in the scope of function directly.

// Code Snippet Example:
//
// fun Int.abs(number: Int): Int {
//      return abs(this)
// }

// The extensions do not modify, it doesn't insert a new member into the original classes or interfaces.
// Extension functions are dispatched statically.
// In the compile time, it is known which extension is called before.
// If the extension function has an identical name and signatures, the member wins always.

// Code Snippet Example:
//
// class A {
//      fun foo(name: String): String       // this function works
// }
//
// fun A.foo(name: String): String { }


// Nullable Receivers
//
// It can be defined with a nullable receiver type

//It can be used with a higher order function.


// Resources: https://kotlinlang.org/docs/extensions.html#nullable-receiver